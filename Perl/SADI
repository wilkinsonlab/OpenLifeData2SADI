#!/usr/bin/perl -w

package OpenLifeData_WRAPPER;

=head1  NAME
  
  OpenLifeData_WRAPPER - a SADI service wrapper for OpenLifeData endpoints


=cut

use strict;
use warnings;
use SADI::Simple 0.007;
use RDF::Trine;
use XML::SAX;
use Log::Log4perl qw(:easy);
use base 'SADI::Simple::SyncService';  # 'SADI::Simple::SyncService' or 'SADI::Simple::AsyncService'

Log::Log4perl->easy_init($WARN);


=head1 CONFIGURATION

  1) You need to set the $CONFIGURATION_FILE_PATH variable in this script
  2) You need to ensure your server generates the REQUEST_URI and HTTP_HOST
     environment variables.  If not, you will need to hard-code the path to this script
     into the Perl code
     
=cut


# since on most servers you cannot serve files from your executables folder
# the cofiguration files will exist somewhere else on your path
# place the path to the ontologies and .cfg files here
my $CONFIGURATION_FILE_PATH="/home/biordf/public_html/OpenLifeData2SADI_ontologies";


# if your server does not provide these environment variables
# REQUEST_URI=/cgi-bin/SADI/someendpoint/some_service_name
# HTTP_HOST=your.domain.org:portnumber
# you will need to set the value of $THISSCRIPT below
my $request_uri = $ENV{'REQUEST_URI'};
my $http_host = $ENV{'HTTP_HOST'};
my $THISSCRIPT;

if (defined($request_uri) && defined($http_host)){
	$THISSCRIPT = "http://" . $http_host . $request_uri;
} else {
	$THISSCRIPT = "http://example.org/YOUR/SERVICE_HERE";
}
&easy_die("somehow script name could not be determined\n") unless $THISSCRIPT;


=head1 PATH_INFO

  the PATH_INFO environment variable contains the additional stuff after the
  script-name in the URL from the client.  e.g.:
  
  http://my.server.org/cgi-bin/SADI/namesp/this_to_that
  
  PATH_INFO will contain "namesp/this_to_that"
  
  PATH_INFO is used as the index keys into the correct configuration files
  
=cut

my $pathinfo = $ENV{'PATH_INFO'};
&easy_die("path information from URL did not match pattern SADI/source/servicename\n") unless ($pathinfo && ($pathinfo =~ /\/?(\S+)\/(\S+)\/?/));
my ($dataset, $method) = ($1, $2);
&easy_die("path information could not be parsed into 'source' and 'servicename'\n") unless ($dataset && $method);
my $CFG = &getConfig($dataset, $method);


open (SPARQL, "$CONFIGURATION_FILE_PATH/$dataset/$method.sparql");
my $sparql = "";
while (<SPARQL>){
	$sparql .= $_;
}
close SPARQL;

open (OWL, "$CONFIGURATION_FILE_PATH/$dataset/$method.owl");
my $owl = "";
while (<OWL>){
	$owl .= $_;
}
close OWL;

&easy_die("couldn't find sparql or owl files where expected\n") unless ($sparql && $owl);

my $servicename = $CFG->{'INPUTCLASS_NAME'}."_".$CFG->{'PREDICATE_NAME'};
&easy_die("couldn't create the servicename\n") unless $servicename;

my $description = "consumes $CFG->{'INPUTCLASS_NAME'} identifiers ($CFG->{'INPUTCLASS_URI'} namespace) and generates the \'$CFG->{'PREDICATE_NAME'}\' property for them from the OpenLifeData $dataset endpoint";
&easy_die("couldn't create service description\n") unless $description;

#  CONFIGURATION FILE EXTRACTON COMPLETE



#  From here on, it's all bog-standard SADI code.  Here we create the service configuration
my %config = (
    ServiceName => $servicename,
    Description => $description,
    InputClass => $CFG->{'INPUTCLASS_URI'},
    OutputClass => $CFG->{'OUTPUTCLASS_URI'},
    URL => $THISSCRIPT, 
    Authority => 'openlifedata2sadi.wilkinsonlab.info', 
    Provider => 'markw@illuminae.com',
    ServiceType => 'http://edamontology.org/operation_2421',  # EDAM:Database Query
    Authoritative => 0,
    NanoPublisher => 1,
);


# and here we decide why we were called, and how to respond
my $service = OpenLifeData_WRAPPER->new(%config);
$service->handle_cgi_request;

#-----------------------------------------------------------------
# SERVICE IMPLEMENTATION PART
#-----------------------------------------------------------------

use RDF::Trine::Node::Resource;
use RDF::Trine::Node::Literal;
use RDF::Trine::Statement;
use RDF::Query::Client;

=head1 Functions

=head2 process_it

 Function: implements the business logic of a SADI service
 Args    : $inputs - ref to an array of RDF::Trine::Node::Resource
           $input_model - an RDF::Trine::Model containing the input RDF data
           $output_model - an RDF::Trine::Model containing the output RDF data
 Returns : nothing (service output is stored in $output_model)

=cut

sub process_it {

    my ($self, $inputs, $input_model, $output_model) = @_;

    my $rdfs = RDF::Trine::Namespace->new(  'http://www.w3.org/2000/01/rdf-schema#');
    my $rdf =  RDF::Trine::Namespace->new( 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');


    foreach my $input (@$inputs) {

    	my $inputURIString = $input->as_string;
		$sparql =~ s/\%VAR/$inputURIString/;  # substitute the SPARQL variable with the URI of the input data

		my $query = RDF::Query::Client->new($sparql);
		my $iterator = $query->execute($CFG->{'GENERIC_ENDPOINT'}.'/',  {Parameters => {timeout => 380000, format => 'application/sparql-results+json'}});  # execute the query against the URL of the endpoint
		if ($iterator){ 
			while (my $row = $iterator->next) {
   				# $row is a HASHref containing variable name -> RDF Term bindings
   				my $result = $row->{ 'obj' }->as_string;
   				my $label = $row->{ 'label' }?$row->{'label'}->as_string:"";
				my $statement = &statement($input, $CFG->{'PREDICATE_URI'}, $result); 
	        		$output_model->add_statement($statement, $input);  # the "input" at the end is for the QUADS - NanoPublications need the context, which in this case is based on the input node being processed

				unless ($statement->object->is_literal){
					my $object = $statement->object;
					my $statement2 = &statement($object, $rdf->type, $CFG->{'OBJECT_TYPE'});
					$output_model->add_statement($statement2, $input);
					next unless $label;
					my $statement3 = &statement($object, $rdfs->label, $label );
					$output_model->add_statement($statement3, $input);
				}
				$output_model->nanopublish_result_for($input);
			}
   		} else {
			easy_die("\n\n\nERROR ".($query->error)." executing $sparql\n\n on  $CFG->{'ORIGINAL_ENDPOINT'}");
			#easy_die($query->error);
		}
	}
}

=head2 easy_die

 included so that debugging info is sent out to the browser, rather than the server error log
 
=cut

sub easy_die {
	my $message = shift; 
	print "Content-type: text/plain", "\n\n";
	print "$message\n\n\n\n";
# uncomment this if you want to see a dump of your server environment variables
# by executing cgi-bin/SADI with no additional path information in your browser
#	for (keys %ENV) { 
#		print "$_=$ENV{$_}\n"; 
#	}
	
	exit 0;
}

=head2 getConfig

 This opens the configuration folder/file and reads the parameter-values to
 set the defaults for this service
 
=cut


sub getConfig{
	my ($dataset, $method) = @_;
	easy_die("Configuration file $dataset $method doesn't exist") unless (-e "$CONFIGURATION_FILE_PATH/$dataset/$method.cfg");

	open (CFG, "$CONFIGURATION_FILE_PATH/$dataset/$method.cfg");
	my %config;
	foreach (
	"INPUTCLASS_NAME", 
	"INPUTCLASS_URI", 
	"OUTPUTCLASS_NAME", 
	"OUTPUTCLASS_URI", 
	"PREDICATE_NAME", 
	"PREDICATE_URI",
	"ORIGINAL_ENDPOINT", 
	"OBJECT_TYPE",) {
		
		my $line = <CFG> || easy_die("not enough parameters in the config file; missing $_\n");
		easy_die("config line $line doesn't match expected structure\n") unless $line =~ /$_\=(\S+)/;
		my $value = $1;
		if ($_ eq "INPUTCLASS_NAME" || $_ eq "OUTPUTCLASS_NAME" || $_ eq "PREDICATE_NAME"){
			$value =~ /[:#]?([^:#]+)$/;  # sometimes includes the Bio2RDF namespace prefix, so remove that
			$value = $1;
		}
		 $config{$_} = $value;
	}
	close CFG;
	return \%config;	
}

sub statement {
	my ($s, $p, $o) = @_;
	unless (ref($s) =~ /Trine/){
		$s =~ s/[\<\>]//g;
		$s = RDF::Trine::Node::Resource->new($s);
	}
	unless (ref($p) =~ /Trine/){
		$p =~ s/[\<\>]//g;
		$p = RDF::Trine::Node::Resource->new($p);
	}
	unless (ref($o) =~ /Trine/){

		if ($o =~ /^http\:\/\//){
			$o = RDF::Trine::Node::Resource->new($o);
		} elsif ($o =~ /^<http\:\/\//){
			$o =~ s/[\<\>]//g;
			$o = RDF::Trine::Node::Resource->new($o);
		} elsif ($o =~ /"(.*?)"\^\^\<http\:/) {
			$o = RDF::Trine::Node::Literal->new($1);
		} else {
			$o = RDF::Trine::Node::Literal->new($o);				
		}
	}
	my $statement = RDF::Trine::Statement->new($s, $p, $o);
	return $statement;
}




1;
